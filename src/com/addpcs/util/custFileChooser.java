/*
 * custFileChooser.java
 *
 * Created on January 17, 2008, 3:46 PM
 */
package com.addpcs.util;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;

/**
 *
 * @author  Justin
 */
public class custFileChooser extends javax.swing.JDialog {

    protected TreeModel model;
    private ArrayList<String> fileNames;
    private ArrayList<File> files;
    private File selPath;
    private boolean noDirs;

    public custFileChooser(java.awt.Frame parent) {
        this(parent, true);
    }

    public custFileChooser(java.awt.Frame parent, boolean modal) {
        super(parent, "Browse...", modal);
        initComponents();
        fileNames = new ArrayList<String>();
        files = new ArrayList<File>();
    }

    public File selectFile() {
        noDirs = true;
        fileList.setEnabled(true);
        disp();
        return selPath;
    }

    public File selectDir() {
        noDirs = false;
        fileList.setEnabled(false);
        disp();
        return selPath;
    }

    public File select() {
        noDirs = false;
        fileList.setEnabled(true);
        disp();
        return selPath;
    }

    private void disp() {
        //Center the window
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        MutableTreeNode root = new DefaultMutableTreeNode("Computer");
        File roots[] = Utils.getValidDrives();
        //loop through all these nodes and add them to the root Computer node
        int i = 0;
        for (File f : roots) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getAbsoluteFile().toString());
            root.insert(node, i++);
        }

        //create a tree model with the Computer node as root
        model = new DefaultTreeModel(root);
        dirTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        txtPath = new javax.swing.JTextField();
        jButtonSel = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(150);

        dirTree.setModel(model);
        dirTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dirTreeselectDir(evt);
            }
        });
        //add a selection listener, to listen for selected nodes
        //dirTree.addTreeSelectionListener(new MyTreeSelectionListener());
        jScrollPane1.setViewportView(dirTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListselectFile(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fileListselectFile1(evt);
            }
        });
        jScrollPane2.setViewportView(fileList);

        jSplitPane1.setRightComponent(jScrollPane2);

        jButtonSel.setText("Select");
        jButtonSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPath, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSel)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void dirTreeselectDir(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dirTreeselectDir
        //get the selected tree path
        javax.swing.tree.TreePath path = dirTree.getLeadSelectionPath();

        //check that a path is in fact selected
        if (path == null) {
            return;
        }
        //get the selected node
        DefaultMutableTreeNode curNode = (DefaultMutableTreeNode) path.getLastPathComponent();

        //get all the nodes in the selected tree path
        Object nodes[] = path.getPath();
        String dir = "";

        //loop through all the tree nodes getting the directory name
        for (int i = 1; i < nodes.length; i++) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) nodes[i];
            //the user object will hold the directory name
            dir += (String) node.getUserObject();
            //add the platform independent directory separator character
            dir += File.separator;
        }
        if (((DefaultMutableTreeNode) path.getLastPathComponent()).isLeaf()) {
            //add the sub directory nodes to the selected one
            addChildren(curNode, dir);
        } else {
            getFiles(curNode, dir);
        }
        repaint();
    }//GEN-LAST:event_dirTreeselectDir

    private void fileListselectFile(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListselectFile
        int num = fileList.getSelectedIndex();
        if (num >= 0) {
            if (evt.getClickCount() > 0) {
                txtPath.setText(files.get(num).toString());
            }
        }
    }//GEN-LAST:event_fileListselectFile

    private void fileListselectFile1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListselectFile1
        int num = fileList.getSelectedIndex();
        if (num >= 0) {
            if (evt.getClickCount() > 0) {
                txtPath.setText(files.get(num).toString());
            }
        }
    }//GEN-LAST:event_fileListselectFile1

    private void jButtonSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelActionPerformed
        // Select Button
        selPath = new File(txtPath.getText());
        if (!noDirs) {
            setVisible(false);
        } else if (!selPath.isDirectory()) {
            setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "You must specify a file name, not a directory.", "Error...", JOptionPane.NO_OPTION);
        }
    }//GEN-LAST:event_jButtonSelActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // Cancel Button
        selPath = null;
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                custFileChooser dialog = new custFileChooser(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Override
    protected void processWindowEvent(WindowEvent e) {
        super.processWindowEvent(e);

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            selPath = null;
            setVisible(false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree dirTree;
    private javax.swing.JList fileList;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
    private void addChildren(MutableTreeNode node, String path) {
        txtPath.setText(path);
        //get directories
        File dir = new File(path);
        File children[] = dir.listFiles();
        fileNames.clear();
        files.clear();
        //add sub nodes to given nodes
        if (children != null) {
            int i = 0;
            for (File f : children) {
                if (f.isDirectory() && !Utils.isReparsePoint(f)) {
                    MutableTreeNode child = new DefaultMutableTreeNode(f.getName());
                    node.insert(child, i++);
                } else {
                    fileNames.add(f.getName());
                    files.add(f);
                }
            }
        }
        fileList.setListData(fileNames.toArray());
    }

    private void getFiles(MutableTreeNode node, String path) {
        txtPath.setText(path);
        //get directories
        File dir = new File(path);
        File children[] = dir.listFiles();
        fileNames.clear();
        files.clear();
        //add sub nodes to given nodes
        if (children != null) {
            for (File f : children) {
                if (f.isFile()) {
                    fileNames.add(f.getName());
                    files.add(f);
                }
            }
        }
        fileList.setListData(fileNames.toArray());
    }
    /*
    private class MyTreeSelectionListener implements javax.swing.event.TreeSelectionListener {
    public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
    //get the selected tree path
    javax.swing.tree.TreePath path = e.getNewLeadSelectionPath();
    //check that a path is in fact selected
    if (path == null) {
    return;
    }
    //get the selected node
    DefaultMutableTreeNode curNode = (DefaultMutableTreeNode) path.getLastPathComponent();
    //get all the nodes in the selected tree path
    Object nodes[] = path.getPath();
    String dir = "";
    //loop through all the tree nodes getting the directory name
    for (int i = 1; i < nodes.length; i++) {
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) nodes[i];
    //the user object will hold the directory name
    dir += (String) node.getUserObject();
    //add the platform independent directory separator character
    dir += File.separator;
    }
    //add the sub directory nodes to the selected one
    addChildren(curNode, dir);
    //refresh the GUI
    repaint();
    }
    }
     * */
}
