/*
 * dataBackup.java
 *
 * Created on December 28, 2007, 10:16 PM
 */
package com.addpcs.BART;

import com.addpcs.util.Utils;
import com.addpcs.util.custFileChooser;
import java.io.*;
import java.util.ArrayList;
//import java.util.Calendar;
//import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author  Justin
 */
public class dataBackup extends javax.swing.JPanel implements Runnable {

    private static String version = "2.2.0";
    private Thread backupThread;
    private File destdir;
    private long splitSize;
    private long[] folderSize = new long[100];
    private long errors;
    private long copied;
    private long skipped;
    private long skippedDir;
    private long totData;
    private long totSize;
    private long fileSize;
    private boolean running;
    private File[] drives;
    private ArrayList<fileInf> multiFiles;
    private FileDrop fileDrop;
    private StringBuilder log;
    private String fs;

    javax.swing.JFrame smartFrame;

    /** Creates new form dataBackup */
    public dataBackup() {
        initComponents();

        drives = Utils.getValidDrives();
        int cdrive = 0;
        cmboDrv.removeAllItems();
        for (int i = 0; i < drives.length; i++) {
            cmboDrv.addItem(drives[i] + " [" + Utils.byteToString(drives[i].getTotalSpace()) + "]");
            if (drives[i].toString().equals("C:\\")) {
                cdrive = i;
            }
        }
        cmboDrv.setSelectedIndex(cdrive);
        multiFiles = new ArrayList<fileInf>();
        log = new StringBuilder();

        //install drag and drop support
        fileDrop = new FileDrop(fList, new FileDrop.Listener() {
            @Override
            public void filesDropped(java.io.File[] files) {
                for (int i = 0; i < files.length; i++) {
                    addFile(files[i]);
                }
            }
        });

        smartFrame = new javax.swing.JFrame("Smart Add");
        smartFrame.add(smart);
        smartFrame.setSize(276, 290);
        Utils.CenterJFrame(smartFrame);
        smartFrame.setVisible(false);

        fs = File.separator;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        smart = new javax.swing.JPanel();
        cmboDrv = new javax.swing.JComboBox();
        chkDocs = new javax.swing.JCheckBox();
        chkMusic = new javax.swing.JCheckBox();
        chkPictures = new javax.swing.JCheckBox();
        chkDesktop = new javax.swing.JCheckBox();
        chkVideos = new javax.swing.JCheckBox();
        chkBookmarks = new javax.swing.JCheckBox();
        chkAppData = new javax.swing.JCheckBox();
        btnSmart = new javax.swing.JButton();
        chkDownloads = new javax.swing.JCheckBox();
        chkContacts = new javax.swing.JCheckBox();
        btnSmartCancel = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        chkEmail = new javax.swing.JCheckBox();
        chkBrowser = new javax.swing.JCheckBox();
        chkAccounting = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        lblDestDir = new javax.swing.JLabel();
        jTxtDest = new javax.swing.JTextField();
        jChkTmp = new javax.swing.JCheckBox();
        jBtnGo = new javax.swing.JButton();
        jBtnDest = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        jChkSplit = new javax.swing.JCheckBox();
        jTxtSize = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jSelSplit = new javax.swing.JRadioButton();
        jSelGroup = new javax.swing.JRadioButton();
        jProgressFile = new javax.swing.JProgressBar();
        jLabel19 = new javax.swing.JLabel();
        jProgressTotal = new javax.swing.JProgressBar();
        jLblTot = new javax.swing.JLabel();
        jChkSkip = new javax.swing.JCheckBox();
        jChkPerm = new javax.swing.JCheckBox();
        lblSpeed = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        multiDir = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fList = new javax.swing.JList();
        btnRem = new javax.swing.JButton();
        txt2Add = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSmartAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        chkFullPath = new javax.swing.JCheckBox();
        jLabelCopy = new javax.swing.JLabel();
        jStatus1 = new javax.swing.JTextField();
        jStatus2 = new javax.swing.JTextField();

        chkDocs.setSelected(true);
        chkDocs.setText("Documents");
        chkDocs.setToolTipText("The My Documents folder");

        chkMusic.setSelected(true);
        chkMusic.setText("Music");
        chkMusic.setToolTipText("The My Music folder");

        chkPictures.setSelected(true);
        chkPictures.setText("Pictures");
        chkPictures.setToolTipText("The My Pictures folder");

        chkDesktop.setSelected(true);
        chkDesktop.setText("Desktop");
        chkDesktop.setToolTipText("User Desktop folders");

        chkVideos.setSelected(true);
        chkVideos.setText("Videos");
        chkVideos.setToolTipText("The My Videos folder");

        chkBookmarks.setSelected(true);
        chkBookmarks.setText("Bookmarks");
        chkBookmarks.setToolTipText("Bookmarks from web browsers.");

        chkAppData.setText("AppData");
        chkAppData.setToolTipText("Everything found in the Application Data folder");

        btnSmart.setText("Add");
        btnSmart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmartActionPerformed(evt);
            }
        });

        chkDownloads.setSelected(true);
        chkDownloads.setText("Downloads");
        chkDownloads.setToolTipText("The Downloads folder");

        chkContacts.setSelected(true);
        chkContacts.setText("Contacts");
        chkContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkContactsActionPerformed(evt);
            }
        });

        btnSmartCancel.setText("Cancel");
        btnSmartCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmartCancelActionPerformed(evt);
            }
        });

        jTextPane1.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Smart Add"));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Searches your hard drive for important data in known location. Select the drive letter to search, and the types of data you are interested in.");
        jTextPane1.setFocusable(false);

        chkEmail.setSelected(true);
        chkEmail.setText("Email");
        chkEmail.setToolTipText("Thunderbird, Opera, Outlook and Outlook Express profiles");

        chkBrowser.setSelected(true);
        chkBrowser.setText("Browser");
        chkBrowser.setToolTipText("Web browser data from Firefox, Opera, Chrome, IE profiles.");

        chkAccounting.setText("Accounting");
        chkAccounting.setToolTipText("Quickbooks and Peachtree files.");
        chkAccounting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAccountingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout smartLayout = new javax.swing.GroupLayout(smart);
        smart.setLayout(smartLayout);
        smartLayout.setHorizontalGroup(
            smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(cmboDrv, 0, 256, Short.MAX_VALUE)
                    .addGroup(smartLayout.createSequentialGroup()
                        .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDocs)
                            .addComponent(chkMusic)
                            .addComponent(chkPictures)
                            .addComponent(chkEmail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDesktop)
                            .addComponent(chkVideos)
                            .addComponent(chkContacts)
                            .addComponent(chkBrowser))
                        .addGap(2, 2, 2)
                        .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkAccounting)
                            .addComponent(chkDownloads)
                            .addComponent(chkBookmarks)
                            .addComponent(chkAppData)))
                    .addGroup(smartLayout.createSequentialGroup()
                        .addComponent(btnSmart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addComponent(btnSmartCancel)))
                .addContainerGap())
        );
        smartLayout.setVerticalGroup(
            smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, smartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmboDrv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDocs)
                    .addComponent(chkDesktop)
                    .addComponent(chkBookmarks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMusic)
                    .addComponent(chkVideos)
                    .addComponent(chkDownloads))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPictures)
                    .addComponent(chkContacts)
                    .addComponent(chkAppData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEmail)
                    .addComponent(chkBrowser)
                    .addComponent(chkAccounting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(smartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSmart)
                    .addComponent(btnSmartCancel))
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/addpcs/BART/databack.png"))); // NOI18N
        jLabel7.setToolTipText("Copies the entire contents of the specified directory into the specified backup directory.");

        lblDestDir.setText("Destination Directory:");

        jTxtDest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtDestgetFreeSpace(evt);
            }
        });

        jChkTmp.setSelected(true);
        jChkTmp.setText("Exclude temp directories");
        jChkTmp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jBtnGo.setText("Backup");
        jBtnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGoActionPerformed(evt);
            }
        });

        jBtnDest.setText("Browse");
        jBtnDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDestActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        jChkSplit.setText("Split into folders:");
        jChkSplit.setToolTipText("Arrange files into numbered folders, less than or equal to the specified size.");
        jChkSplit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jChkSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChkSplitActionPerformed(evt);
            }
        });

        jTxtSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtSize.setText("4400");
        jTxtSize.setEnabled(false);

        jLabel18.setText("MB");

        jSelSplit.setText("Best Fit");
        jSelSplit.setToolTipText("Uses the fewest possible output folders, files are slightly more scattered, but maintain the correct folder tree.");
        jSelSplit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jSelSplit.setEnabled(false);

        jSelGroup.setSelected(true);
        jSelGroup.setText("Better Grouping");
        jSelGroup.setToolTipText("Keep files in subfolders grouped together in the same output folder, as much as possible.");
        jSelGroup.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jSelGroup.setEnabled(false);

        jLabel19.setText("Total: ");

        jLblTot.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLblTot.setText(" ");

        jChkSkip.setText("Skip Existing Files");
        jChkSkip.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jChkSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChkSkipActionPerformed(evt);
            }
        });

        jChkPerm.setText("Reset file permissions");
        jChkPerm.setToolTipText("Sets the owner of all files and folders to the Administrators group, and grants full control permissions to everyone.  Requires a few extra minutes to process.");
        jChkPerm.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        lblSpeed.setText(" ");

        lblTime.setText(" ");

        fList.setFont(new java.awt.Font("Courier New", 0, 11));
        fList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickity(evt);
            }
        });
        fList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fListKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keyListener(evt);
            }
        });
        jScrollPane1.setViewportView(fList);

        btnRem.setText("Remove");
        btnRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemActionPerformed(evt);
            }
        });

        txt2Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt2AddActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSmartAdd.setText("Smart Add");
        btnSmartAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmartAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Source Files:");

        javax.swing.GroupLayout multiDirLayout = new javax.swing.GroupLayout(multiDir);
        multiDir.setLayout(multiDirLayout);
        multiDirLayout.setHorizontalGroup(
            multiDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiDirLayout.createSequentialGroup()
                .addComponent(btnRem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSmartAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 332, Short.MAX_VALUE)
                .addComponent(btnBrowse))
            .addGroup(multiDirLayout.createSequentialGroup()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt2Add, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE))
            .addGroup(multiDirLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
        );
        multiDirLayout.setVerticalGroup(
            multiDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, multiDirLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(multiDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRem)
                    .addComponent(btnClear)
                    .addComponent(btnSmartAdd)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(multiDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(txt2Add, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        chkFullPath.setText("Keep full path");
        chkFullPath.setToolTipText("When selected, the source folder hierarchy is copied to the destination.  Otherwise, the contents of the src directory are copied directly into the destination directory.");

        jLabelCopy.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabelCopy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCopy.setText("© 2010 ADDPCs.com");
        jLabelCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCopyMouseClicked(evt);
            }
        });

        jStatus1.setEditable(false);
        jStatus1.setBorder(null);
        jStatus1.setOpaque(false);

        jStatus2.setBorder(null);
        jStatus2.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(multiDir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jStatus1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addComponent(jLabelCopy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addComponent(jProgressFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLblTot, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE))
                    .addComponent(jProgressTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDestDir, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkFullPath))
                            .addComponent(jTxtDest, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jChkSplit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTxtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSelGroup)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSelSplit)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                                .addComponent(jChkPerm))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jChkTmp)
                                .addGap(8, 8, 8)
                                .addComponent(jChkSkip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                                .addComponent(jBtnCancel)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnGo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnDest, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(jStatus2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkFullPath)
                    .addComponent(lblDestDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnDest)
                    .addComponent(jTxtDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnGo)
                    .addComponent(jBtnCancel)
                    .addComponent(jChkSkip)
                    .addComponent(jChkTmp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jChkPerm)
                    .addComponent(jChkSplit)
                    .addComponent(jTxtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSpeed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelGroup)
                    .addComponent(jSelSplit)
                    .addComponent(lblTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLblTot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCopy))
        );

        jLabelCopy.getAccessibleContext().setAccessibleName("© 2010 ADDPCs.com");
    }// </editor-fold>//GEN-END:initComponents
	private void jTxtDestgetFreeSpace(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtDestgetFreeSpace
        // Determine Free Space in dest dir of DataBackup
        File d = new File(jTxtDest.getText());
        //while (d.getParentFile() != null) {
        //    d = d.getParentFile();
        //}
        if (d.exists()) {
            lblDestDir.setText("<html>Destination Directory: <font color=\"#FF0000\"><b>" + Utils.byteToString(d.getUsableSpace()) + "</b> available</font</html>");
        } else {
            lblDestDir.setText("Destination Directory:");
        }
        }//GEN-LAST:event_jTxtDestgetFreeSpace

        private void jBtnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGoActionPerformed
            // actually do backup
            destdir = new File(jTxtDest.getText());
            splitSize = (long) Integer.parseInt(jTxtSize.getText().trim()) * 1024 * 1024;
            if (!destdir.exists()) {
                destdir.mkdirs();
            }
            if (multiFiles.size() > 0) {
                if (destdir.isDirectory()) {
                    jProgressTotal.setValue(0);
                    jProgressTotal.setMaximum(100);
                    jProgressFile.setValue(0);
                    jProgressFile.setMaximum(100);
                    guiSetEnabled(false);
                    backupThread = new Thread(this);
                    backupThread.start();
                } else {
                    jStatus2.setText("Destination directory is not valid.");
                }
            } else {
                jStatus1.setText("Please add at least one source to copy.");
            }
	}//GEN-LAST:event_jBtnGoActionPerformed

    private void guiSetEnabled(boolean en) {
        jBtnDest.setEnabled(en);
        jTxtDest.setEnabled(en);
        jChkSplit.setEnabled(en);
        jChkTmp.setEnabled(en);
        jSelGroup.setEnabled(en && jChkSplit.isSelected());
        jSelSplit.setEnabled(en && jChkSplit.isSelected());
        jTxtSize.setEnabled(en && jChkSplit.isSelected());
        jChkSkip.setEnabled(en);
        jChkPerm.setEnabled(en);
        jBtnGo.setEnabled(en);

        //tabber.setEnabled(en);
        txt2Add.setEnabled(en);
        btnClear.setEnabled(en);
        btnAdd.setEnabled(en);
        btnRem.setEnabled(en);
        btnBrowse.setEnabled(en);
        fList.setEnabled(en);
        chkFullPath.setEnabled(en);
    }

	private void jBtnDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDestActionPerformed
        // Browse a directory
        custFileChooser fc = new custFileChooser(null);
        File picked = fc.selectDir();
        if (picked != null) {
            //Update text bar
            jTxtDest.setText(picked.toString());
            //while (picked.getParentFile() != null) {
            //    picked = picked.getParentFile();
            //}
            lblDestDir.setText("<html>Destination Directory: <font color=\"#FF0000\"><b>" + Utils.byteToString(picked.getUsableSpace()) + "</b> available</font</html>");
        } else {
            //Cancel Button
        }
	}//GEN-LAST:event_jBtnDestActionPerformed

	private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        running = false;
        guiSetEnabled(true);
	}//GEN-LAST:event_jBtnCancelActionPerformed

	private void jChkSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChkSplitActionPerformed
        jSelSplit.setEnabled(jChkSplit.isSelected());
        jSelGroup.setEnabled(jChkSplit.isSelected());
        jTxtSize.setEnabled(jChkSplit.isSelected());
	}//GEN-LAST:event_jChkSplitActionPerformed

	private void jChkSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChkSkipActionPerformed
        // TODO add your handling code here:
	}//GEN-LAST:event_jChkSkipActionPerformed

	private void btnRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemActionPerformed
        // Remove from List
        int num = fList.getSelectedIndex();
        if (num >= 0) {
            totSize -= multiFiles.get(num).getSize();
            jStatus2.setText("Removed " + multiFiles.get(num).toString() + " from list...");
            multiFiles.remove(num);
            fList.setListData(multiFiles.toArray());
        }

	}//GEN-LAST:event_btnRemActionPerformed

	private void txt2AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt2AddActionPerformed
        // Add to list
        if (addFile(new File(txt2Add.getText()))) {
            txt2Add.setText("");
        }
	}//GEN-LAST:event_txt2AddActionPerformed

	private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // Browse a directory
        custFileChooser fc = new custFileChooser(null);
        File picked = fc.select();
        if (picked != null) {
            //Update text bar
            txt2Add.setText(picked.toString());
        } else {
            //Cancel Button
        }
	}//GEN-LAST:event_btnBrowseActionPerformed

	private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Add to list
        if (addFile(new File(txt2Add.getText()))) {
            txt2Add.setText("");
        }
	}//GEN-LAST:event_btnAddActionPerformed

	private void clickity(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickity
        int num = fList.getSelectedIndex();
        if (num >= 0) {
            if (evt.getClickCount() == 2) {
                txt2Add.setText(multiFiles.get(num).path.toString());
            }
            jStatus1.setText("Selected size: " + Utils.byteToString(multiFiles.get(num).getSize()) + "  Total: " + Utils.byteToString(sumDirs()));
        }
	}//GEN-LAST:event_clickity

	private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Clear
        multiFiles.clear();
        fList.setListData(multiFiles.toArray());
        txt2Add.setText("");
	}//GEN-LAST:event_btnClearActionPerformed

    private boolean addFile(File f) {
        if (f.exists()) {
            if (f.isDirectory() && (Utils.isReparsePoint(f) || Utils.parentIsReparsePoint(f))) {
                jStatus2.setText("Cannot add reparse point: " + f + " - not a valid directory.");
                //log.append("Cannot add reparse point: ").append(f).append(" - not a valid directory.\n");
            } else {
                //Check for existing parent
                for(fileInf m : multiFiles) {
                    if(m.path.equals(f)) {
                        jStatus2.setText("Duplicate file in list: " + f);
                        return false;
                    } else if(Utils.isSubfolder(m.path,f)) {
                        jStatus2.setText("Containing parent in list: " + m.path);
                        return false;
                    }
                }
                if(f.isDirectory()) {
                    //Check for existing children of dir
                    int i=0;
                    while(i < multiFiles.size()) {
                        if(Utils.isSubfolder(f,multiFiles.get(i).path)) {
                            jStatus2.setText("Removed duplicate child entry: " + multiFiles.get(i).path);
                            totSize -= multiFiles.get(i).getSize();
                            multiFiles.remove(i);
                        } else {
                            i++;
                        }
                    }
                }
                multiFiles.add(new fileInf(f, jChkPerm.isSelected()));
                fList.setListData(multiFiles.toArray());
                return true;
            }
        } else {
            jStatus2.setText("File not found: " + f);
        }
        return false;
    }

    private void addFilesWithExtension(File baseDir, String ext, boolean searchSubdirs) {
        try {
            File[] children = baseDir.listFiles();
            for (File child : children) {
                if (child.isDirectory() && searchSubdirs) {
                    addFilesWithExtension(child, ext, searchSubdirs);
                } else if (child.isFile()) {
                    if (child.getName().toLowerCase().endsWith(ext.toLowerCase())) {
                        addFile(child);
                    }
                }
            }
        } catch (Exception e) {}
    }

    private void addDocuments(File baseDir) {
        if (chkDocs.isSelected()) {
            addFile(new File(baseDir, "Documents"));
            addFile(new File(baseDir, "My Documents"));
        }
    }

    private void addMusic(File baseDir) {
        if (chkMusic.isSelected()) {
            addFile(new File(baseDir, "Music"));
            addFile(new File(baseDir, "My Music"));
            addFile(new File(baseDir, "My Documents" + fs + "My Music"));
        }
    }

    private void addPictures(File baseDir) {
        if (chkPictures.isSelected()) {
            addFile(new File(baseDir, "Pictures"));
            addFile(new File(baseDir, "My Documents" + fs + "My Pictures"));
        }
    }

    private void addDesktop(File baseDir) {
        if (chkDesktop.isSelected()) {
            addFile(new File(baseDir, "Desktop"));
        }
    }

    private void addVideos(File baseDir) {
        if (chkVideos.isSelected()) {
            addFile(new File(baseDir, "Videos"));
            addFile(new File(baseDir, "My Documents" + fs + "My Videos"));
        }
    }

    private void addFavorites(File baseDir) {
        if (chkBookmarks.isSelected()) {
            addFile(new File(baseDir, "Favorites"));
        }
    }

    private void addContacts(File baseDir) {
        if (chkContacts.isSelected()) {
            addFile(new File(baseDir, "Contacts"));
        }
    }

    private void addAppData(File baseDir) {
        if (chkAppData.isSelected()) {
            addFile(new File(baseDir, "ProgramData"));
            addFile(new File(baseDir, "AppData"));
            addFile(new File(baseDir, "Application Data"));
            addFile(new File(baseDir, "Local Settings" + fs + "Application Data"));
        }
    }

    private void addDownloads(File baseDir) {
        if (chkDownloads.isSelected()) {
            addFile(new File(baseDir, "Downloads"));
            addFile(new File(baseDir, "My Documents" + fs + "Downloads"));
            addFile(new File(baseDir, "My Documents" + fs + "My Downloads"));
        }
    }

    

    private void addBrowsersAppData(File appDataBaseDir) {
        if (chkBrowser.isSelected()) {
            addFile(new File(appDataBaseDir, "Mozilla" + fs + "Firefox" + fs + "Profiles"));
            addFile(new File(appDataBaseDir, "Google" + fs + "Chrome" + fs + "User Data" + fs + "Default"));
            addFile(new File(appDataBaseDir, "Opera"));
        }
    }

    private void addBookmarksAppData(File appDataBaseDir) {
        if (chkBookmarks.isSelected()) {
            addFile(new File(appDataBaseDir, "Opera" + fs + "Opera" + fs + "bookmars.adr"));
            addFile(new File(appDataBaseDir, "Google" + fs + "Chrome" + fs + "User Data" + fs + "Default" + fs + "Bookmarks"));
            File[] ffProfs = new File(appDataBaseDir, "Mozilla" + fs + "Firefox" + fs + "Profiles").listFiles();
            if (ffProfs != null) {
                for (File ffProf : ffProfs) {
                    addFile(new File(ffProf, "bookmarks.html"));
                }
            }
        }
    }

    private void addContactsAppData(File appDataBaseDir) {
        if (chkContacts.isSelected()) {
            addFile(new File(appDataBaseDir, "Opera" + fs + "Opera" + fs + "contacts.adr"));
        }
    }

    private void addEmailAppData(File appDataBaseDir) {
        if (chkEmail.isSelected()) {
            addFile(new File(appDataBaseDir, "Thunderbird" + fs + "Profiles"));
            addFile(new File(appDataBaseDir, "Microsoft" + fs + "Windows Mail"));
            addFile(new File(appDataBaseDir, "Opera" + fs + "Opera" + fs + "mail"));
            addFilesWithExtension(new File(appDataBaseDir, "Microsoft" + fs + "Address Book"), ".wab", false);
            addFilesWithExtension(new File(appDataBaseDir, "Microsoft" + fs + "Outlook Express" + fs + "Mail"), ".mbx", false);
            addFilesWithExtension(new File(appDataBaseDir, "Microsoft" + fs + "Outlook"), ".pst", false);
        }
    }
    
    private void addEmailRoot(File baseDir) {
        if (chkEmail.isSelected()) {
            addFilesWithExtension(new File(baseDir, "Program Files" + fs + "Outlook Express"), ".mbx", true);
        }
    }

    private void addAccounting(File baseDir) {
        if (chkAccounting.isSelected()) {
            addFilesWithExtension(new File(baseDir, "Program Files" + fs + "Intuit"), ".qbw", true);
            addFilesWithExtension(new File(baseDir, "Program Files" + fs + "Intuit"), ".qbb", true);
            addFilesWithExtension(new File(baseDir, "Program Files" + fs + "Sage Sofware"), ".ptb", true);
            addFile(new File(baseDir, "Program Files" + fs + "Sage Sofware" + fs + "Peachtree" + fs + "Company"));
        }
    }

    private void addFromAppData(File baseDir) {
        ArrayList<File> appDatas = new ArrayList<File>();
        appDatas.add(new File(baseDir, "ProgramData"));
        appDatas.add(new File(baseDir, "AppData"));
        appDatas.add(new File(baseDir, "Application Data"));
        appDatas.add(new File(baseDir, "Local Settings" + fs + "Application Data"));

        for (File appData : appDatas) {
            ArrayList<File> subs = new ArrayList<File>();
            subs.add(appData);
            subs.add(new File(appData, "Roaming"));
            subs.add(new File(appData, "LocalLow"));
            subs.add(new File(appData, "Local"));
            for (File sub : subs) {
                addBrowsersAppData(sub);
                addBookmarksAppData(sub);
                addEmailAppData(sub);
                addContactsAppData(sub);
            }
        }
    }

    private void addAllUser(File userDir) {
        addDocuments(userDir);
        addAppData(userDir);
        addMusic(userDir);
        addPictures(userDir);
        addDesktop(userDir);
        addVideos(userDir);
        addFavorites(userDir);
        addContacts(userDir);
        addDownloads(userDir);
        addFromAppData(userDir);
    }

    private void addAllRoot(File rootDir) {
        addEmailRoot(rootDir);
        addAccounting(rootDir);
    }

	private void btnSmartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmartActionPerformed
        // Find all of the data
        //tabber.setSelectedIndex(0);
        smartFrame.setVisible(false);
        chkFullPath.setSelected(true);
        File srcDrv = drives[cmboDrv.getSelectedIndex()];

        ArrayList<File> windirs = new ArrayList<File>();
        windirs.add(new File(srcDrv, "Windows"));
        windirs.add(new File(srcDrv, "WinNT")); //Check for NT style windows folder
        ArrayList<File> docs = new ArrayList<File>();
        docs.add(new File(srcDrv, "Users")); //Windows Vista, 7
        docs.add(new File(srcDrv, "Documents and Settings")); //Windows XP
        for (File windir : windirs) {
            docs.add(new File(windir, "Profiles")); //Win98,ME multiple users
            docs.add(windir); //Win98,ME single user
        }
        docs.add(srcDrv); //For the obscure Win98 case

        addAllRoot(srcDrv);

        for (File doc : docs) {
            if (doc.exists()) {
                addAllUser(doc);
                try {
                    File[] users = doc.listFiles();
                    if(users != null) {
                        for (File user : users) {
                            if (user.isDirectory()) {
                                addAllUser(user);
                            }
                        }
                    }
                } catch (Exception ex) {
                    //error
                }
            }
        }
	}//GEN-LAST:event_btnSmartActionPerformed

	private void jLabelCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCopyMouseClicked
        // show about dialog
        JOptionPane.showMessageDialog(null, "B.A.R.T. - Backup Automation and Recovery Tool v" + version + "\nCreated by Justin Murray\nCopyright 2010 ADDPCs\nhttp://software.addpcs.com", "About...", JOptionPane.NO_OPTION);
	}//GEN-LAST:event_jLabelCopyMouseClicked

	private void keyListener(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyListener
	}//GEN-LAST:event_keyListener

	private void fListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fListKeyPressed
        //Check for delete key
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            // Remove from List
            int num = fList.getSelectedIndex();
            if (num >= 0) {
                totSize -= multiFiles.get(num).getSize();
                jStatus2.setText("Removed " + multiFiles.get(num).toString() + " from list...");
                multiFiles.remove(num);
                fList.setListData(multiFiles.toArray());
            }
        }
	}//GEN-LAST:event_fListKeyPressed

    private void chkContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkContactsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_chkContactsActionPerformed

    private void btnSmartAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmartAddActionPerformed
        //Show the smart Add dialogue
        smartFrame.setVisible(true);
    }//GEN-LAST:event_btnSmartAddActionPerformed

    private void btnSmartCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmartCancelActionPerformed
        smartFrame.setVisible(false);
    }//GEN-LAST:event_btnSmartCancelActionPerformed

    private void chkAccountingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAccountingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkAccountingActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnRem;
    private javax.swing.JButton btnSmart;
    private javax.swing.JButton btnSmartAdd;
    private javax.swing.JButton btnSmartCancel;
    private javax.swing.JCheckBox chkAccounting;
    private javax.swing.JCheckBox chkAppData;
    private javax.swing.JCheckBox chkBookmarks;
    private javax.swing.JCheckBox chkBrowser;
    private javax.swing.JCheckBox chkContacts;
    private javax.swing.JCheckBox chkDesktop;
    private javax.swing.JCheckBox chkDocs;
    private javax.swing.JCheckBox chkDownloads;
    private javax.swing.JCheckBox chkEmail;
    private javax.swing.JCheckBox chkFullPath;
    private javax.swing.JCheckBox chkMusic;
    private javax.swing.JCheckBox chkPictures;
    private javax.swing.JCheckBox chkVideos;
    private javax.swing.JComboBox cmboDrv;
    private javax.swing.JList fList;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnDest;
    private javax.swing.JButton jBtnGo;
    private javax.swing.JCheckBox jChkPerm;
    private javax.swing.JCheckBox jChkSkip;
    private javax.swing.JCheckBox jChkSplit;
    private javax.swing.JCheckBox jChkTmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelCopy;
    private javax.swing.JLabel jLblTot;
    private javax.swing.JProgressBar jProgressFile;
    private javax.swing.JProgressBar jProgressTotal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton jSelGroup;
    private javax.swing.JRadioButton jSelSplit;
    private javax.swing.JTextField jStatus1;
    private javax.swing.JTextField jStatus2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField jTxtDest;
    private javax.swing.JTextField jTxtSize;
    private javax.swing.JLabel lblDestDir;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel multiDir;
    private javax.swing.JPanel smart;
    private javax.swing.JTextField txt2Add;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        File srcRoot;
        running = true;
        errors = 0;
        copied = 0;
        skipped = 0;
        skippedDir = 0;
        totData = 0;
        long free = 0;
        //File d = destdir;
        //while (d.getParentFile() != null) {
        //    d = d.getParentFile();
        //}
        free = destdir.getUsableSpace();
        if (free >= totSize) {
            (new timer()).start();
            if (jChkSplit.isSelected()) {
                for (int i = 0; i < 100; i++) {
                    folderSize[i] = splitSize;
                }
            }
            for (int i = 0; i < multiFiles.size(); i++) {
                fList.setSelectedIndex(i);
                if (jChkPerm.isSelected()) {
                    multiFiles.get(i).setPerms();
                }
                log.append("Copying: ").append(multiFiles.get(i).path.getAbsolutePath()).append(" - ").append(Utils.byteToString(multiFiles.get(i).getSize())).append("\n");
                srcRoot = multiFiles.get(i).path;
                while (srcRoot.getParentFile() != null) {
                    srcRoot = srcRoot.getParentFile();
                }

                free = 0;
                //d = destdir;
                //while (d.getParentFile() != null) {
                //    d = d.getParentFile();
                //}
                free = destdir.getUsableSpace();
                if (free >= multiFiles.get(i).getSize()) {
                    if (jChkSplit.isSelected()) {
                        if (jSelSplit.isSelected()) {
                            if (chkFullPath.isSelected()) {
                                folderSplit(multiFiles.get(i).path, destdir, srcRoot, splitSize);
                            } else {
                                folderSplit(multiFiles.get(i).path, destdir, multiFiles.get(i).path.getParentFile(), splitSize);
                            }
                        } else {
                            if (chkFullPath.isSelected()) {
                                folderGroup(multiFiles.get(i).path, destdir, srcRoot, splitSize);
                            } else {
                                folderGroup(multiFiles.get(i).path, destdir, multiFiles.get(i).path.getParentFile(), splitSize);
                            }
                        }
                    } else {
                        if (chkFullPath.isSelected()) {
                            File temp = multiFiles.get(i).path;
                            String pth = temp.getAbsolutePath().substring(temp.getAbsolutePath().indexOf(fs));
                            if (temp.isFile()) {
                                pth = pth.substring(0, pth.lastIndexOf(fs));
                            }
                            xcopy(multiFiles.get(i).path, new File(destdir, pth));
                        } else {
                            if (multiFiles.get(i).path.isFile()) {
                                xcopy(multiFiles.get(i).path, destdir);
                            } else {
                                xcopy(multiFiles.get(i).path, new File(destdir, multiFiles.get(i).path.getName()));
                            }
                        }
                    }
                } else {
                    log.append("Not enough space to copy ").append(multiFiles.get(i)).append("\n");
                }
            }
            //Code to run when finished
            JOptionPane.showMessageDialog(null, "Backup Complete!\n" + copied + " files copied successfully.\n" + skippedDir + " directories skipped.\n" + skipped + " files skipped.\n" + errors + " files could not be copied.\n" + Utils.byteToString(totData) + " transferred.");
            log.append("Backup Complete!").append("\n");
            log.append("- ").append(copied).append(" files copied successfully.").append("\n");
            log.append("- ").append(skippedDir).append(" directories skipped.").append("\n");
            log.append("- ").append(skipped).append(" files skipped.").append("\n");
            log.append("- ").append(errors).append(" files could not be copied.").append("\n");
            log.append("- ").append(Utils.byteToString(totData)).append(" transferred.").append("\n");
            jStatus1.setText("");
            jStatus2.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "The destination directory does not have enough free space to copy the source files.\nSelect a destination with at least " + Utils.byteToString(totSize) + " of free space.");
        }
        System.out.println(log);
        guiSetEnabled(true);
        running = false;
    }

    public int longPercent(long numer, long denom) {
        double divisor = (double) denom / (double) 100;
        return (int) ((double) numer / divisor);
    }

    public boolean xcopy(File src, File dest) {
        return xcopy(src, dest, -1);
    }

    public boolean xcopy(File src, File dest, int folder) {
        if (running && src != null && src.exists()) {
            try {
                if (src.isFile()) {
                    if (!isTemp(src)) {
                        jStatus1.setText(src.getParent());
                        jStatus1.setToolTipText(src.getParent());
                        jStatus2.setText("Copying: " + src.getName());
                        jStatus2.setToolTipText(src.getName());
                        if (!jChkSkip.isSelected() || !new File(dest, src.getName()).exists()) {
                            dest.mkdirs();
                            dest = new File(dest, src.getName());
                            DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(src)));
                            DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dest)));
                            byte[] buffer = new byte[1024];
                            int len;
                            long fileData = 0;
                            fileSize = src.length();
                            while ((len = in.read(buffer)) >= 0) {
                                out.write(buffer, 0, len);
                                fileData += len;
                                totData += len;
                                //System.out.println("-- " + fileData + "/" + fileSize + " = " + percent + "%");
                                jProgressFile.setValue(longPercent(fileData, fileSize));
                                jProgressTotal.setValue(longPercent(totData, totSize));
                                jLblTot.setText(Utils.byteToString(totData) + " of " + Utils.byteToString(totSize));
                            }
                            in.close();
                            out.close();
                            if (folder >= 0) {
                                folderSize[folder] -= src.length();
                            }
                            copied++;
                        } else {
                            skipped++;
                            totSize -= new File(dest, src.getName()).length();
                            jLblTot.setText(Utils.byteToString(totData) + " of " + Utils.byteToString(totSize));
                        }
                    }
                    return true;
                } else if (src.isDirectory()) {
                    if (!isTemp(src)) {
                        if(!Utils.isReparsePoint(src)) {
                            File[] children = src.listFiles();
                            if(children != null) {
                                for (int i = 0; i < children.length; i++) {
                                    if (children[i].isFile()) {
                                        xcopy(children[i], dest, folder);
                                    } else {
                                        //Subfolders
                                        xcopy(children[i], new File(dest, children[i].getName()), folder);
                                    }
                                }
                            }
                        } else {
                            jStatus2.setText("Skipping Reparse Point: " + src.getName());
                            skippedDir++;
                            return false;
                        }
                    } else {
                        jStatus2.setText("Skipping temporary dir: " + src.getName());
                        skippedDir++;
                        return false;
                    }
                    return true;
                } else {
                    return false;
                }
            } catch (IOException ex) {
                //ex.printStackTrace();
                jStatus2.setText("Error copying file: " + src.getName());
                errors++;
                return false;
            }
        } else {
            return false;
        }
    }

    public boolean folderSplit(File src, File dest, File rootsrc, long size) {
        if (src.exists()) {

            if (src.isFile()) {
                fileSize = src.length();
                int i = 0;
                if (fileSize > size) {
                    xcopy(src, new File(dest, "Too Big to Fit" + fs + relPath(rootsrc, src.getParentFile())));
                } else {
                    while (fileSize > folderSize[i]) {
                        i++;
                    }
                    xcopy(src, new File(dest, "Disc " + (i + 1) + fs + relPath(rootsrc, src.getParentFile())), i);
                }
                return true;
            } else if (src.isDirectory()) {
                if (!isTemp(src) && !Utils.isReparsePoint(src)) {
                    File[] children = src.listFiles();
                    if(children != null) {
                        for (int i = 0; i < children.length; i++) {
                            folderSplit(children[i], dest, rootsrc, size);
                        }
                    }
                }
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public boolean folderGroup(File src, File dest, File rootsrc, long size) {
        if (src.exists()) {
            if (src.isDirectory() && !Utils.isReparsePoint(src)) {
                if (!isTemp(src)) {
                    long mySize = dirSize(src, size);
                    if (mySize <= size) {
                        int i = 0;
                        while (mySize > folderSize[i]) {
                            i++;
                        }
                        xcopy(src, new File(dest, "Disc " + (i + 1) + fs + relPath(rootsrc, src)), i);
                    } else {
                        File[] children = src.listFiles();
                        if(children != null) {
                            long myFileSize = dirFileSize(src, size);
                            int a = 0;
                            if (myFileSize <= size) {
                                while (myFileSize > folderSize[a]) {
                                    a++;
                                }
                                for (int i = 0; i < children.length; i++) {
                                    if (children[i].isFile()) {
                                        xcopy(children[i], new File(dest, "Disc " + (a + 1) + fs + relPath(rootsrc, children[i].getParentFile())), a);
                                    } else {
                                        //Subfolders
                                        folderGroup(children[i], dest, rootsrc, size);
                                    }
                                }
                            } else {
                                for (int i = 0; i < children.length; i++) {
                                    folderGroup(children[i], dest, rootsrc, size);
                                }
                            }
                        }
                    }
                }
                return true;
            } else if (src.isFile()) {
                fileSize = src.length();
                int i = 0;
                if (fileSize > size) {
                    xcopy(src, new File(dest, "Too Big to Fit" + fs + relPath(rootsrc, src.getParentFile())));
                } else {
                    while (fileSize > folderSize[i]) {
                        i++;
                    }
                    xcopy(src, new File(dest, "Disc " + (i + 1) + fs + relPath(rootsrc, src.getParentFile())), i);
                }
                return true;
            }
        } else {
            return false;
        }
        return true;
    }

    private String relPath(File root, File dest) {
        return dest.toString().substring(root.toString().length());
    }

    private long dirSize(File dir, long max) {
        try {
            if (dir.isFile()) {
                return dir.length();
            }
            jStatus2.setText("Calculating folder size...");
            File[] children = null;
            try {
                children = dir.listFiles();
            } catch (Exception e) {
                if (jChkPerm.isSelected()) {
                    Utils.filePerms(dir);
                    try {
                        children = dir.listFiles();
                    } catch (Exception ex) {
                        log.append("Access denied: ").append(dir.toString()).append("\n");
                        return 0;
                    }
                }
            }
            long total = 0;
            try {
                for (File child : children) {
                    try {
                        if (!isTemp(child) && child.isFile()) {
                            total += child.length();
                        } else if (!isTemp(child) && !Utils.isReparsePoint(child)) {
                            total += dirSize(child, max);
                        }
                        if (total > max && max > 0) {
                            return total;
                        }
                        jStatus2.setText("Calculating folder size... " + Utils.byteToString(total));
                    } catch (Exception ex) {
                        log.append("Access denied: ").append(dir.toString()).append("\n");
                    }
                }
            } catch (Exception x) {
            }
            return total;
        } catch (Exception ex) {
            log.append("Access denied: ").append(dir.toString()).append("\n");
            return 0;
        }
    }

    private boolean isTemp(File test) {
        if (!jChkTmp.isSelected()) {
            return false;
        }
        String fName = test.getName();
        if (test.isFile()) {
            if (fName.equalsIgnoreCase("hiberfil.sys")) {
                return true;
            } else if (fName.equalsIgnoreCase("pagefile.sys")) {
                return true;
            } else if (fName.equalsIgnoreCase("Thumbs.db")) {
                return true;
            } else {
                return false;
            }
        } else {
            if (fName.equalsIgnoreCase("Temp")) {
                return true;
            } else if (fName.equalsIgnoreCase("Prefetch")) {
                return true;
            } else if (fName.equalsIgnoreCase("RECYCLER")) {
                return true;
            } else if (fName.equalsIgnoreCase("System Volume Information")) {
                return true;
            } else if (fName.equalsIgnoreCase("Temporary Internet Files")) {
                return true;
            } else if (fName.equalsIgnoreCase("$RECYCLE.BIN")) {
                return true;
            } else if (fName.length() >= 2 && (fName.charAt(0) == '$' && fName.charAt(fName.length() - 1) == '$')) {
                return true;
            } else {
                return false;
            }
        }
    }

    private long dirFileSize(File dir, long max) {
        jStatus2.setText("Grouping files...");
        File[] children = dir.listFiles();
        long total = 0;
        if(children != null) {
            for (int i = 0; i < children.length; i++) {
                try {
                    if (!isTemp(children[i]) && children[i].isFile()) {
                        total += children[i].length();
                    }
                    if (total > max && max > 0) {
                        return total;
                    }
                } catch (Exception ex) {
                    System.out.println("File access error in dirSize.");
                }
            }
        }
        return total;
    }

    private class timer extends Thread {

        @Override
        public void run() {
            int count = 0;
            long t1;
            long t2;
            long d1;
            long d2;
            long data;
            double time;
            double[] bps = {2, 2, 2, 2, 2};
            double avg = 0;
            double rem;
            while (running) {
                t1 = System.nanoTime();
                d1 = totData;
                try {
                    timer.sleep(3000);
                } catch (InterruptedException ex) {
                    //ex.printStackTrace();
                }
                t2 = System.nanoTime();
                d2 = totData;

                time = (t2 - t1) / 1000000000.0;
                data = d2 - d1;
                if (time > 0) {
                    bps[count % 5] = data / time;
                    avg = (bps[0] + bps[1] + bps[2] + bps[3] + bps[4]) / 5.0;
                    lblSpeed.setText(bps2String(bps[count % 5]));
                    if (avg > 0) {
                        rem = (totSize - totData) / avg;
                        lblTime.setText(sec2Str(rem));
                    }
                }
                count++;
            }
        }

        private String bps2String(double bps) {
            if (bps > 1024 * 1024 * 1024) {
                return "" + Utils.round(bps / (1024 * 1024 * 1024), 3) + " GB/s";
            } else if (bps > 1024 * 1024) {
                return "" + Utils.round(bps / (1024 * 1024), 3) + " MB/s";
            } else if (bps > 1024) {
                return "" + Utils.round(bps / 1024, 3) + " KB/s";
            } else {
                return "" + bps + " Bytes/s";
            }
        }

        private String sec2Str(double sec) {
            int hr = (int) sec / 3600;
            sec %= 3600;
            int min = (int) sec / 60;
            sec %= 60;
            String hrs;
            String mins;
            String secs;
            if (hr < 10) {
                hrs = "0" + hr;
            } else {
                hrs = "" + hr;
            }
            if (min < 10) {
                mins = "0" + min;
            } else {
                mins = "" + min;
            }
            if (sec < 10) {
                secs = "0" + (int) sec;
            } else {
                secs = "" + (int) sec;
            }
            return "" + hrs + ":" + mins + ":" + secs;
        }
    }

    private class count extends Thread {

        private File target;
        private long size;
        private boolean done;

        public count(File t) {
            super();
            target = t;
            size = -1;
            done = false;
        }

        @Override
        public void run() {
            size = dirSize(target, -1);
            done = true;
            totSize = sumDirs();
            jStatus1.setText("Added size: " + Utils.byteToString(size) + "  Total: " + Utils.byteToString(totSize));
        }

        public boolean isDone() {
            return done;
        }
    }

    private class fileInf {

        private File path;
        private count counter;
        private boolean permsSet;

        public fileInf(File f) {
            this(f, false);
        }

        public fileInf(File f, boolean setPermissions) {
            path = f;
            permsSet = false;
            if (setPermissions) {
                setPerms();
            }
            counter = new count(f);
            counter.start();
        }

        public boolean countDone() {
            return counter.isDone();
        }

        public long getSize() {
            return counter.size;
        }

        public final void setPerms() {
            if (!permsSet) {
                log.append("Setting file permissions: ").append(path.getName()).append("...").append("\n");
                Utils.filePerms(path);
                permsSet = true;
            }
        }

        @Override
        public String toString() {
            if(this.countDone()) {
                return Utils.spacedString("[" + Utils.byteToString(this.getSize()) + "] ", 15) + path.getAbsolutePath();
            } else {
                return Utils.spacedString("[]", 15) + path.getAbsolutePath();
            }
        }
    }

    private long sumDirs() {
        long sum = 0;
        int i = 0;
        while (i < multiFiles.size()) {
            if(multiFiles.get(i).countDone()) {
                if(multiFiles.get(i).getSize() == 0) {
                    log.append("Ignoring empty directory: ").append(multiFiles.get(i)).append("\n");
                    multiFiles.remove(i);
                    fList.setListData(multiFiles.toArray());
                } else {
                    sum += multiFiles.get(i).getSize();
                    i++;
                }
            } else {
                i++;
            }
        }
        return sum;
    }

    private boolean countDone() {
        for (fileInf m : multiFiles) {
            if (!m.countDone()) {
                return false;
            }
        }
        return true;
    }
    private static javax.swing.JFrame mainFrame;

    public static void main(String[] args) {
        if (args.length == 1) {
            if (args[0].equalsIgnoreCase("--version")) {
                System.out.println(version);
                return;
           }
        }

        System.out.println("Copyright 2010 Justin Murray\nhttp://software.addpcs.com");
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            //e.printStackTrace();
        }
        mainFrame = new javax.swing.JFrame("BART - Backup Automation and Recovery Tool v" + version);
        mainFrame.add(new dataBackup());
        mainFrame.pack();
        mainFrame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        mainFrame.setIconImage(new ImageIcon((new Utils()).getClass().getResource("/com/addpcs/BART/db.png")).getImage());
        showGui();
    }

    private static void showGui() {
        Utils.CenterJFrame(mainFrame);
        mainFrame.setVisible(true);
    }
}
